#version 460 core

in flat vec2 tex_coordinates;
in flat vec2 resolution;
in vec2 win_coords;

const uint VRAM_BUFFER_SIZE = (1024 * 512) / 2;

layout(std430, binding = 4) coherent readonly restrict buffer vram_ssbo {
	uint vram[VRAM_BUFFER_SIZE];
};

out vec4 color;

void main() {
	//Compute pixel position inside VRAM
	uint x_base = uint(tex_coordinates.x * 1024);
	uint y_base = uint(tex_coordinates.y * 512);

	//Resolution has full int range
	uint x_off = uint(win_coords.x * resolution.x);
	uint y_off = uint(win_coords.y * resolution.y);

	uint pixel_x = x_base + x_off;
	uint pixel_y = y_base + y_off;

	//Each pixel will occupy two texels in the texture,
	//which will be consecutive on the x axis 
	uint index = uint(pixel_y * 512 + float(pixel_x) * 0.75);
	uint first_texel = vram[index];
	uint second_texel = vram[index + 1];

	uint pixel_state = pixel_x & 3;

	uint r = 0;
	uint g = 0;
	uint b = 0;

	//RGBR
	//GBRG
	//BRGB
	//...

	if(pixel_state == 0) {
		r = first_texel & 0xFF;
		g = (first_texel >> 8) & 0xFF;
		b = (first_texel >> 16) & 0xFF;
	} else if(pixel_state == 1) {
		r = (first_texel >> 24) & 0xFF;
		g = second_texel & 0xFF;
		b = (second_texel >> 8) & 0xFF;
	} else if(pixel_state == 2) {
		r = (first_texel >> 16) & 0xFF;
		g = (first_texel >> 24) & 0xFF;
		b = second_texel & 0xFF;
	} else {
		r = (first_texel >> 8) & 0xFF;
		g = (first_texel >> 16) & 0xFF;
		b = (first_texel >> 24) & 0xFF;
	}

	color = vec4(float(r) / 0xFF, float(g) / 0xFF, float(b) / 0xFF, 1.0);
	//color = vec4(float(pixel_x) / 1024.0, float(pixel_y) / 512.0, 0.0, 1.0);
}