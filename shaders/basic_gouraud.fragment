#version 430 core

in vec2 vram_coords;
in vec3 vertex_color;

layout(std140, binding = 2) uniform globals {
	bool use_dither;
	uint tex_window_mask_x;
	uint tex_window_mask_y;
	uint tex_window_off_x;
	uint tex_window_off_y;
	int draw_x_off;
	int draw_y_off;
	bool set_mask;
	bool check_mask;
};

out vec4 color;

const mat4 dither_table = mat4(
	vec4(-4, 2, -3, 3),
	vec4(0, -2, 1, -1),
	vec4(-3, 3, -4, 2),
	vec4(1, -1, 0, -2)
);

void main() {
	uint r = uint(vertex_color.r);
	uint g = uint(vertex_color.g);
	uint b = uint(vertex_color.b);
	uint x = uint(vram_coords.x);
	uint y = uint(vram_coords.y);

	if(use_dither) {
	    uint dither_x = x % 4;
		uint dither_y = y % 4;
		int dither_coeff = int(dither_table[dither_y][dither_x]);
		int r_unclamped = int(r) + dither_coeff;
		int g_unclamped = int(g) + dither_coeff;
		int b_unclamped = int(b) + dither_coeff;
		r = uint(clamp(r_unclamped, 0x00, 0xFF));
		g = uint(clamp(g_unclamped, 0x00, 0xFF));
		b = uint(clamp(b_unclamped, 0x00, 0xFF));
	}

	color = vec4(
		float(r) / 255.0,
		float(g) / 255.0,
		float(b) / 255.0,
		1.0
	);
}