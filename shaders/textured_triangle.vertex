#version 430 core

layout(location = 0) in int vram_x;
layout(location = 1) in int vram_y;
layout(location = 2) in uint color;
layout(location = 3) in uint clut_and_page;
layout(location = 4) in uint in_flags;
layout(location = 5) in uint uv;

layout(std140, binding = 2) uniform globals {
	bool use_dither;
	uint tex_window_mask_x;
	uint tex_window_mask_y;
	uint tex_window_off_x;
	uint tex_window_off_y;
	int draw_x_off;
	int draw_y_off;
	bool set_mask;
	bool check_mask;
};

out vec2 coords;
out vec3 interpolated_color;
out flat vec3 base_color;
out vec2 out_uv;
out flat uint x_base;
out flat uint y_base;
out flat uint blend_func;
out flat uint texpage_colors;
out flat uint flags;
out flat uint clut_x;
out flat uint clut_y;


void main() {
	float x = float(vram_x) / 1024.0;
	float y = float(vram_y) / 512.0;

	coords = vec2(float(vram_x), float(vram_y));

	x = x * 2 - 1;
	y = y * 2 - 1;

	gl_Position = vec4(x, y, 0.0, 1.0);

	uint r = (color & 0xFF);
	uint g = (color >> 8) & 0xFF;
	uint b = (color >> 16) & 0xFF;

	vec3 float_color = vec3(
		float(r),
		float(g),
		float(b)
	);

	base_color = float_color;
	interpolated_color = float_color;

	uint v = (uv >> 8) & 0xFF;
	uint u = uv & 0xFF;

	out_uv = vec2(
		float(u),
		float(v)
	);

	flags = in_flags;

	x_base = (clut_and_page & 0xF) * 64;
	y_base = ((clut_and_page >> 4) & 1) * 256;
	blend_func = (clut_and_page >> 5) & 3;
	texpage_colors = (clut_and_page >> 7) & 3;

	uint clut = (clut_and_page >> 16) & 0xFFFF;
	clut_x = (clut & 63) * 16;
	clut_y = (clut >> 6) & 0x1FF;
}